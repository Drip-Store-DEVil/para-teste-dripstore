// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstname String
  surname   String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int               @id @default(autoincrement()) // Chave primária com incremento automático
  name        String // Nome da categoria (obrigatório)
  slug        String // Slug da categoria (obrigatório)
  use_in_menu Boolean           @default(false) // Exibição no menu (opcional, padrão 0)
  products    ProductCategory[] // Relacionamento com produtos

  @@map("categories") // Nome da tabela no banco
}

model Product {
  id                  Int               @id @default(autoincrement()) // Chave primária com incremento automático
  enabled             Boolean           @default(false) // Produto habilitado ou desabilitado (padrão 0)
  name                String // Nome do produto (obrigatório)
  slug                String // Slug do produto (obrigatório)
  use_in_menu         Boolean           @default(false) // Exibição no menu (opcional, padrão 0)
  stock               Int               @default(0) // Quantidade disponível (padrão 0)
  description         String? // Descrição do produto (opcional)
  price               Float // Preço do produto (obrigatório)
  price_with_discount Float // Preço com desconto (obrigatório)
  images              ProductImage[] // Relacionamento com imagens do produto
  options             ProductOption[] // Relacionamento com opções do produto
  categories          ProductCategory[] // Relacionamento com categorias

  @@map("products") // Nome da tabela no banco
}

model ProductImage {
  id        Int     @id @default(autoincrement()) // Chave primária
  productId Int // Chave estrangeira para a tabela de produtos
  enabled   Boolean @default(false) // Define se está habilitado, padrão: 0 (false)
  path      String // Caminho relativo da imagem no servidor
  product   Product @relation(fields: [productId], references: [id]) // Relação com produtos

  @@map("product_images") // Nome da tabela no banco
}

model ProductOption {
  id        Int       @id @default(autoincrement()) // Chave primária
  productId Int // Chave estrangeira para a tabela de produtos
  title     String // Título da opção
  shape     Shape     @default(SQUARE) // Formato da opção (square ou circle)
  radius    Int       @default(0) // Valor do border-radius (padrão: 0)
  type      InputType @default(TEXT) // Tipo do input (text ou color)
  values    String // Opções do produto separadas por vírgula
  product   Product   @relation(fields: [productId], references: [id]) // Relação com produtos

  @@map("product_options") // Nome da tabela no banco
}

enum Shape {
  SQUARE
  CIRCLE
}

enum InputType {
  TEXT
  COLOR
}

model ProductCategory {
  productId  Int // Chave estrangeira para tabela de produtos
  categoryId Int // Chave estrangeira para tabela de categorias
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId]) // Composta para evitar duplicatas
  @@map("product_categories") // Nome da tabela no banco
}
